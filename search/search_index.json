{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Drizm Python Commons This package contains shared code used by the Drizm organizations development team. It is not intended for public usage, but you may still download, redistribute or modify it to your liking. Author: Ben \"ThaRising\" Koch Maintainers: Dominik Lewandowski Requirements Python ^3.8.X supported. Debian 9+ and Ubuntu 18.04+ for Linux, as well as Windows 10 1909+ , are tested and supported. Other OS are still most likely supported, but were not explicitly tested. Features This project implements utilities for a very broad range of use-cases and packages. As such, fully installing everything may not be the route you want to go. The following features are supported: Featureset Module-Name Extra-Name SQLAlchemy Utilities sqla sqla GoogleCloudPlatform Extras google google General Utilities - - Testing Utilities - - All feature-sets without an addition \"extra-name\", are included in the minimal installation. Installation Minimal Installation pip install drizm-commons This will only inlcude the testing and utils subpackages. Installation with Extras Install SQLAlchemy features: pip install drizm-commons[sqla] Install Google-Cloud utils: pip install drizm-commons[google] Complete Installation Complete installation (everything above): pip install drizm-commons[all] Importing the Package Once installed, you can import the package like so: import drizm_commons","title":"Overview"},{"location":"#drizm-python-commons","text":"This package contains shared code used by the Drizm organizations development team. It is not intended for public usage, but you may still download, redistribute or modify it to your liking. Author: Ben \"ThaRising\" Koch Maintainers: Dominik Lewandowski","title":"Drizm Python Commons"},{"location":"#requirements","text":"Python ^3.8.X supported. Debian 9+ and Ubuntu 18.04+ for Linux, as well as Windows 10 1909+ , are tested and supported. Other OS are still most likely supported, but were not explicitly tested.","title":"Requirements"},{"location":"#features","text":"This project implements utilities for a very broad range of use-cases and packages. As such, fully installing everything may not be the route you want to go. The following features are supported: Featureset Module-Name Extra-Name SQLAlchemy Utilities sqla sqla GoogleCloudPlatform Extras google google General Utilities - - Testing Utilities - - All feature-sets without an addition \"extra-name\", are included in the minimal installation.","title":"Features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#minimal-installation","text":"pip install drizm-commons This will only inlcude the testing and utils subpackages.","title":"Minimal Installation"},{"location":"#installation-with-extras","text":"Install SQLAlchemy features: pip install drizm-commons[sqla] Install Google-Cloud utils: pip install drizm-commons[google]","title":"Installation with Extras"},{"location":"#complete-installation","text":"Complete installation (everything above): pip install drizm-commons[all]","title":"Complete Installation"},{"location":"#importing-the-package","text":"Once installed, you can import the package like so: import drizm_commons","title":"Importing the Package"},{"location":"changes/","text":"Changelog 0.1.1 Added SQLAlchemy JSON Encoder Fixed bugs related to the Introspection API Added table registry Added additional utilities 0.1.2 Added get_root_path and recursive delete Path utilities Fixed various bugs 0.2.0 Added full test suite Added testing tools Revamped introspection API Provided additional overrides for the SQL connection adapter 0.2.1 Added support for datetime JSON encoding 0.2.2 Improved in-code documentation Integrated additional utils from drizm-django-commons 0.3.0 Added introspection capabilities for property and SQLAlchemy's hybrid_property SQLAEncoder now respects property and hybrid_property on SQLA declarative instances Additional customizability hooks for custom fields or data handling Support for JSON-Encoding table instances Added SQLA as optional dependency Added additional testing utilities 0.3.1 Improved code documentation Added docs Added memoize function decorator to cache last previously passed function parameter 0.3.2 Fixed issue with introspection API picking up validation methods 0.3.3 Added additional tests and bugfixes 0.3.4 Added support for comments and special character parsing to Tfvars 0.4.0 Added method to force obtain GoogleCloudPlatform Id-Tokens 0.4.1 Added function to convert CamelCase to snake_case 0.4.2 Added TestStorageBucket Updated docs Added camelCase to snake_case name converter 0.5.0 The most major update thus far. It includes a complete restructuring of the package, as well as full blown documentation. Additionally, the test coverage is now much higher and more manual testing has been done to ensure that everything works as expected in as many scenarios as possible. Additions: drizm_commons.utils.type.IterableKeysDictionary drizm_commons.utils.decorators.resolve_super_auto_resolution drizm_commons.testing.faker.* drizm_commons.conversion.* drizm_commons.biased.* Improvements: get_absolute_root_path() now supports more ways of determining the project root correctly and is now much more accurate AttrDict now automatically converts '-' to '_' in keys Multiple improvements to the truthiness functions","title":"Changelog"},{"location":"changes/#changelog","text":"","title":"Changelog"},{"location":"changes/#011","text":"Added SQLAlchemy JSON Encoder Fixed bugs related to the Introspection API Added table registry Added additional utilities","title":"0.1.1"},{"location":"changes/#012","text":"Added get_root_path and recursive delete Path utilities Fixed various bugs","title":"0.1.2"},{"location":"changes/#020","text":"Added full test suite Added testing tools Revamped introspection API Provided additional overrides for the SQL connection adapter","title":"0.2.0"},{"location":"changes/#021","text":"Added support for datetime JSON encoding","title":"0.2.1"},{"location":"changes/#022","text":"Improved in-code documentation Integrated additional utils from drizm-django-commons","title":"0.2.2"},{"location":"changes/#030","text":"Added introspection capabilities for property and SQLAlchemy's hybrid_property SQLAEncoder now respects property and hybrid_property on SQLA declarative instances Additional customizability hooks for custom fields or data handling Support for JSON-Encoding table instances Added SQLA as optional dependency Added additional testing utilities","title":"0.3.0"},{"location":"changes/#031","text":"Improved code documentation Added docs Added memoize function decorator to cache last previously passed function parameter","title":"0.3.1"},{"location":"changes/#032","text":"Fixed issue with introspection API picking up validation methods","title":"0.3.2"},{"location":"changes/#033","text":"Added additional tests and bugfixes","title":"0.3.3"},{"location":"changes/#034","text":"Added support for comments and special character parsing to Tfvars","title":"0.3.4"},{"location":"changes/#040","text":"Added method to force obtain GoogleCloudPlatform Id-Tokens","title":"0.4.0"},{"location":"changes/#041","text":"Added function to convert CamelCase to snake_case","title":"0.4.1"},{"location":"changes/#042","text":"Added TestStorageBucket Updated docs Added camelCase to snake_case name converter","title":"0.4.2"},{"location":"changes/#050","text":"The most major update thus far. It includes a complete restructuring of the package, as well as full blown documentation. Additionally, the test coverage is now much higher and more manual testing has been done to ensure that everything works as expected in as many scenarios as possible. Additions: drizm_commons.utils.type.IterableKeysDictionary drizm_commons.utils.decorators.resolve_super_auto_resolution drizm_commons.testing.faker.* drizm_commons.conversion.* drizm_commons.biased.* Improvements: get_absolute_root_path() now supports more ways of determining the project root correctly and is now much more accurate AttrDict now automatically converts '-' to '_' in keys Multiple improvements to the truthiness functions","title":"0.5.0"},{"location":"cookbook/","text":"Cookbook This section includes practical examples of how to use some of the utilities in this package. Fixing super() Resolution for type() created classes When trying to programatically create classes using the type() constructor, or the types.new_class() constructor, you may encounter the following problem when wanting to use a parameterless super() call later on: TypeError: super(type, obj): obj must be an instance or subtype of type Here is a simple example, to reproduce the above case with: class Something : def truth ( self ): return 42 class MyThing : def __new__ ( cls , * args , ** kwargs ): dunder_dict = { ** cls . __dict__ , \"__init__\" : lambda * a , ** kw : None } dunder_dict . pop ( \"__new__\" ) kls = type ( cls . __name__ , ( Something ,), dunder_dict ) return kls () def truth ( self ): return super () . truth () + 8 if __name__ == '__main__' : my_thing = MyThing () my_thing . truth () # TypeErrror Using utilities from this package, the above can be fixed via: from drizm_commons.utils import ( decorate_class_object_methods , decorators ) class Something : def truth ( self ): return 42 class MyThing : def __new__ ( cls , * args , ** kwargs ): dunder_dict = { ** cls . __dict__ , \"__init__\" : lambda * a , ** kw : None } dunder_dict . pop ( \"__new__\" ) kls = type ( cls . __name__ , ( Something ,), dunder_dict ) kls = decorate_class_object_methods ( kls , decorators . resolve_super_auto_resolution , ) return kls () def truth ( self ): return super () . truth () + 8 if __name__ == '__main__' : my_thing = MyThing () my_thing . truth () # 50 See the reference for both of these Methods: resolve_super_auto_resolution decorate_class_object_methods","title":"Cookbook"},{"location":"cookbook/#cookbook","text":"This section includes practical examples of how to use some of the utilities in this package.","title":"Cookbook"},{"location":"cookbook/#fixing-super-resolution-for-type-created-classes","text":"When trying to programatically create classes using the type() constructor, or the types.new_class() constructor, you may encounter the following problem when wanting to use a parameterless super() call later on: TypeError: super(type, obj): obj must be an instance or subtype of type Here is a simple example, to reproduce the above case with: class Something : def truth ( self ): return 42 class MyThing : def __new__ ( cls , * args , ** kwargs ): dunder_dict = { ** cls . __dict__ , \"__init__\" : lambda * a , ** kw : None } dunder_dict . pop ( \"__new__\" ) kls = type ( cls . __name__ , ( Something ,), dunder_dict ) return kls () def truth ( self ): return super () . truth () + 8 if __name__ == '__main__' : my_thing = MyThing () my_thing . truth () # TypeErrror Using utilities from this package, the above can be fixed via: from drizm_commons.utils import ( decorate_class_object_methods , decorators ) class Something : def truth ( self ): return 42 class MyThing : def __new__ ( cls , * args , ** kwargs ): dunder_dict = { ** cls . __dict__ , \"__init__\" : lambda * a , ** kw : None } dunder_dict . pop ( \"__new__\" ) kls = type ( cls . __name__ , ( Something ,), dunder_dict ) kls = decorate_class_object_methods ( kls , decorators . resolve_super_auto_resolution , ) return kls () def truth ( self ): return super () . truth () + 8 if __name__ == '__main__' : my_thing = MyThing () my_thing . truth () # 50 See the reference for both of these Methods: resolve_super_auto_resolution decorate_class_object_methods","title":"Fixing super() Resolution for type() created classes"},{"location":"faking/","text":"Primitive Data drizm_commons.testing.faker Utilities for generating randomized test data. from drizm_commons.testing import faker random_email_address ( top_level_domain = 'com' , choice_sequence = 'abcdefghijklmnopqrstuvwxyz' ) Generates a randomized email address out of provided presets. Parameters: Name Type Description Default top_level_domain Optional[str] The top-level-domain for the email address to be generated. 'com' choice_sequence Optional[Sequence] A sequence of characters that will be used to generated the random host and domain parts of the email address. 'abcdefghijklmnopqrstuvwxyz' Returns: Type Description str A semi-randomized email of the following format: prefix@host.tld . random_flat_colored_image ( size_x , size_y , ext = 'jpeg' ) Generates a randomized image for testing purposes. Parameters: Name Type Description Default size_x int The width of the image to be generated, in pixels. required size_y int The height of the image to be generated, in pixels. required ext Optional[str] The filetype of the image to be generated, e.g. jpeg or png . 'jpeg' Returns: Type Description BytesIO A BytesIO file object, representing the generated image. random_hex_color ( short = False ) Generates a random hexadecimal color string. Parameters: Name Type Description Default short Optional[bool] If True , this function will generated a shortened 3-digit hex color, otherwise a 6-digit hex color will be generated instead. False Returns: Type Description str A three or six digit hex color of the format #ff00ff or #f0f . random_rgb_color () Generates a random RGB-Color. Returns: Type Description Tuple[int] A tuple of 3 integer values between 0 and 255, representing the RGB colorspace of the generated color.","title":"Primitive Data"},{"location":"faking/#primitive-data","text":"","title":"Primitive Data"},{"location":"faking/#drizm_commons.testing.faker","text":"Utilities for generating randomized test data. from drizm_commons.testing import faker","title":"faker"},{"location":"faking/#drizm_commons.testing.faker.random_email_address","text":"Generates a randomized email address out of provided presets. Parameters: Name Type Description Default top_level_domain Optional[str] The top-level-domain for the email address to be generated. 'com' choice_sequence Optional[Sequence] A sequence of characters that will be used to generated the random host and domain parts of the email address. 'abcdefghijklmnopqrstuvwxyz' Returns: Type Description str A semi-randomized email of the following format: prefix@host.tld .","title":"random_email_address()"},{"location":"faking/#drizm_commons.testing.faker.random_flat_colored_image","text":"Generates a randomized image for testing purposes. Parameters: Name Type Description Default size_x int The width of the image to be generated, in pixels. required size_y int The height of the image to be generated, in pixels. required ext Optional[str] The filetype of the image to be generated, e.g. jpeg or png . 'jpeg' Returns: Type Description BytesIO A BytesIO file object, representing the generated image.","title":"random_flat_colored_image()"},{"location":"faking/#drizm_commons.testing.faker.random_hex_color","text":"Generates a random hexadecimal color string. Parameters: Name Type Description Default short Optional[bool] If True , this function will generated a shortened 3-digit hex color, otherwise a 6-digit hex color will be generated instead. False Returns: Type Description str A three or six digit hex color of the format #ff00ff or #f0f .","title":"random_hex_color()"},{"location":"faking/#drizm_commons.testing.faker.random_rgb_color","text":"Generates a random RGB-Color. Returns: Type Description Tuple[int] A tuple of 3 integer values between 0 and 255, representing the RGB colorspace of the generated color.","title":"random_rgb_color()"},{"location":"google/","text":"Google Cloud Platform (GCP) Utilities drizm_commons.google.testing TestStorageBucket A class that exposes a simple API for working with GCS buckets in tests. Examples: from drizm_commons.google import TestStorageBucket from google.oauth2 import service_account credentials = service_account . Credentials . from_service_account_file ( \"path/to/svc.json\" ) test_bucket = TestStorageBucket ( project_id = \"your-project-id\" , credentials = credentials ) test_bucket . create () # ... do whatever you need to test ... test_bucket . destroy () autogenerate_bucket_name () staticmethod Automatically generates a generic bucket name, in case none has been provided by the user. create ( self , obtain_existing = False ) Create and obtain a testing bucket. If a bucket already exists under this name, you can pass 'obtain_existing = True' to retrieve it. If no parameters are provided, this method will attempt to create a new bucket with the given name. destroy ( self ) Delete the testing bucket and all items in it. As per the limitations of the Python GCS API, this will only work on buckets with 256 blobs or less. drizm_commons.google.token force_obtain_id_token ( credentials ) Can be used to obtain an OIDC-Token for authenticating to GoogleCloud services and some Google APIs. This is effectively manually forcing the equivalent of credentials.refresh() . Examples: from drizm_commons.google import force_obtain_id_token from google.oauth2 import service_account auth = service_account . IDTokenCredentials . from_service_account_file ( \"/path/to/svc.json\" , target_audience = \"https://example.com/\" ) token = force_obtain_id_token ( auth ) Returns: Type Description str Returns a Google OpenID-Connect access token as a string.","title":"GCP Utilities"},{"location":"google/#google-cloud-platform-gcp-utilities","text":"","title":"Google Cloud Platform (GCP) Utilities"},{"location":"google/#drizm_commons.google.testing","text":"","title":"testing"},{"location":"google/#drizm_commons.google.testing.TestStorageBucket","text":"A class that exposes a simple API for working with GCS buckets in tests. Examples: from drizm_commons.google import TestStorageBucket from google.oauth2 import service_account credentials = service_account . Credentials . from_service_account_file ( \"path/to/svc.json\" ) test_bucket = TestStorageBucket ( project_id = \"your-project-id\" , credentials = credentials ) test_bucket . create () # ... do whatever you need to test ... test_bucket . destroy ()","title":"TestStorageBucket"},{"location":"google/#drizm_commons.google.testing.TestStorageBucket.autogenerate_bucket_name","text":"Automatically generates a generic bucket name, in case none has been provided by the user.","title":"autogenerate_bucket_name()"},{"location":"google/#drizm_commons.google.testing.TestStorageBucket.create","text":"Create and obtain a testing bucket. If a bucket already exists under this name, you can pass 'obtain_existing = True' to retrieve it. If no parameters are provided, this method will attempt to create a new bucket with the given name.","title":"create()"},{"location":"google/#drizm_commons.google.testing.TestStorageBucket.destroy","text":"Delete the testing bucket and all items in it. As per the limitations of the Python GCS API, this will only work on buckets with 256 blobs or less.","title":"destroy()"},{"location":"google/#drizm_commons.google.token","text":"","title":"token"},{"location":"google/#drizm_commons.google.token.force_obtain_id_token","text":"Can be used to obtain an OIDC-Token for authenticating to GoogleCloud services and some Google APIs. This is effectively manually forcing the equivalent of credentials.refresh() . Examples: from drizm_commons.google import force_obtain_id_token from google.oauth2 import service_account auth = service_account . IDTokenCredentials . from_service_account_file ( \"/path/to/svc.json\" , target_audience = \"https://example.com/\" ) token = force_obtain_id_token ( auth ) Returns: Type Description str Returns a Google OpenID-Connect access token as a string.","title":"force_obtain_id_token()"},{"location":"sqla/","text":"SQLAlchemy Utilities drizm_commons.sqla.encode SQLAlchemy declarative compatible JSON encoder. from drizm_commons.sqla.encode import * SqlaDeclarativeEncoder A custom JSON encoder for serializing SQLAlchemy declarative base instances. Supports ISO8601 compliant datetime encoding. default ( self , o ) Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o) dump ( self , v ) Hook for custom object deserialization. handle_failure ( self , exc , value ) Can be overridden to provide handling for custom fields. serialize_datetypes_to_iso ( self , v ) Converts datetime formats to ISO8601 compliant strings. drizm_commons.sqla.inspect Introspection for various SQLAlchemy objects. from drizm_commons.inspect import SQLAIntrospector SQLAIntrospectorInterface classname: str property readonly Name of the Declarative Base class if available. column_attrs: List [ str ] property readonly Outputs all attributes of a mapped class, except for properties, dunders and methods, as well as some of the SQLAlchemy specific attributes. This will include all columns that SQLAlchemy uses, but also attributes that the user has placed themselves. foreign_keys ( self , columns_only = False ) Retrieves the names and targets of foreign key columns on the table. Parameters: Name Type Description Default columns_only bool If True , this will only obtain the names of the columns. False Returns: Type Description Union[list, dict] Either a list of column names or a dictionary of column names and Foreign key targets. primary_keys ( self , retrieve_constraint = False ) Return a list of the names of all primary key columns of the model. Parameters: Name Type Description Default retrieve_constraint Optional[bool] If set to True , the actual SQLA constraint objects will be returned as a list False unique_keys ( self , include_pks = True ) Obtains all unique key column names of the object. Parameters: Name Type Description Default include_pks Optional[bool] If set False , this will not include primary-key columns in the selection. True Returns: Type Description List[str] A list of column names, that have a unique constraint on them. is_mapped_class ( cls ) Check whether a given class has been mapped by SQLAlchemy. Parameters: Name Type Description Default cls Type[sqlalchemy.ext.declarative.api.DeclarativeMeta] The declarative class to be checked for mapping. required Returns: Type Description bool True if the class is a mapped SQLAlchemy declarative class, else False . SQLAIntrospector ( o ) Factory returning a matching introspector class. Parameters: Name Type Description Default o Union[sqlalchemy.ext.declarative.api.DeclarativeMeta, sqlalchemy.sql.schema.Table, Type[sqlalchemy.ext.declarative.api.DeclarativeMeta]] Any applicable SQLAlchemy table representation, such as a Declarative- class, instance or a standard table object. required Returns: Type Description SQLAIntrospectorInterface A matching introspector class for the provided object. drizm_commons.sqla.conn.Database A simplified connection interface for an SQLAlchemy engine. create ( self , base_override = None ) Creates all tables in the current Base destroy ( self , base_override = None ) Destroys all tables in the current Base override_engine ( self , uri , ** kwargs ) Provides an option to manually override the auto-specced engine. :param uri: Database URI :param kwargs: Normal kwargs as provided to the create_engine factory Session ( self ) Provides access to a scoped ORM Session","title":"SQLAlchemy Utilities"},{"location":"sqla/#sqlalchemy-utilities","text":"","title":"SQLAlchemy Utilities"},{"location":"sqla/#drizm_commons.sqla.encode","text":"SQLAlchemy declarative compatible JSON encoder. from drizm_commons.sqla.encode import *","title":"encode"},{"location":"sqla/#drizm_commons.sqla.encode.SqlaDeclarativeEncoder","text":"A custom JSON encoder for serializing SQLAlchemy declarative base instances. Supports ISO8601 compliant datetime encoding.","title":"SqlaDeclarativeEncoder"},{"location":"sqla/#drizm_commons.sqla.encode.SqlaDeclarativeEncoder.default","text":"Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"default()"},{"location":"sqla/#drizm_commons.sqla.encode.SqlaDeclarativeEncoder.dump","text":"Hook for custom object deserialization.","title":"dump()"},{"location":"sqla/#drizm_commons.sqla.encode.SqlaDeclarativeEncoder.handle_failure","text":"Can be overridden to provide handling for custom fields.","title":"handle_failure()"},{"location":"sqla/#drizm_commons.sqla.encode.SqlaDeclarativeEncoder.serialize_datetypes_to_iso","text":"Converts datetime formats to ISO8601 compliant strings.","title":"serialize_datetypes_to_iso()"},{"location":"sqla/#drizm_commons.sqla.inspect","text":"Introspection for various SQLAlchemy objects. from drizm_commons.inspect import SQLAIntrospector","title":"inspect"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospectorInterface","text":"","title":"SQLAIntrospectorInterface"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospectorInterface.classname","text":"Name of the Declarative Base class if available.","title":"classname"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospectorInterface.column_attrs","text":"Outputs all attributes of a mapped class, except for properties, dunders and methods, as well as some of the SQLAlchemy specific attributes. This will include all columns that SQLAlchemy uses, but also attributes that the user has placed themselves.","title":"column_attrs"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospectorInterface.foreign_keys","text":"Retrieves the names and targets of foreign key columns on the table. Parameters: Name Type Description Default columns_only bool If True , this will only obtain the names of the columns. False Returns: Type Description Union[list, dict] Either a list of column names or a dictionary of column names and Foreign key targets.","title":"foreign_keys()"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospectorInterface.primary_keys","text":"Return a list of the names of all primary key columns of the model. Parameters: Name Type Description Default retrieve_constraint Optional[bool] If set to True , the actual SQLA constraint objects will be returned as a list False","title":"primary_keys()"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospectorInterface.unique_keys","text":"Obtains all unique key column names of the object. Parameters: Name Type Description Default include_pks Optional[bool] If set False , this will not include primary-key columns in the selection. True Returns: Type Description List[str] A list of column names, that have a unique constraint on them.","title":"unique_keys()"},{"location":"sqla/#drizm_commons.sqla.inspect.is_mapped_class","text":"Check whether a given class has been mapped by SQLAlchemy. Parameters: Name Type Description Default cls Type[sqlalchemy.ext.declarative.api.DeclarativeMeta] The declarative class to be checked for mapping. required Returns: Type Description bool True if the class is a mapped SQLAlchemy declarative class, else False .","title":"is_mapped_class()"},{"location":"sqla/#drizm_commons.sqla.inspect.SQLAIntrospector","text":"Factory returning a matching introspector class. Parameters: Name Type Description Default o Union[sqlalchemy.ext.declarative.api.DeclarativeMeta, sqlalchemy.sql.schema.Table, Type[sqlalchemy.ext.declarative.api.DeclarativeMeta]] Any applicable SQLAlchemy table representation, such as a Declarative- class, instance or a standard table object. required Returns: Type Description SQLAIntrospectorInterface A matching introspector class for the provided object.","title":"SQLAIntrospector()"},{"location":"sqla/#drizm_commons.sqla.conn.Database","text":"A simplified connection interface for an SQLAlchemy engine.","title":"Database"},{"location":"sqla/#drizm_commons.sqla.conn.Database.create","text":"Creates all tables in the current Base","title":"create()"},{"location":"sqla/#drizm_commons.sqla.conn.Database.destroy","text":"Destroys all tables in the current Base","title":"destroy()"},{"location":"sqla/#drizm_commons.sqla.conn.Database.override_engine","text":"Provides an option to manually override the auto-specced engine. :param uri: Database URI :param kwargs: Normal kwargs as provided to the create_engine factory","title":"override_engine()"},{"location":"sqla/#drizm_commons.sqla.conn.Database.Session","text":"Provides access to a scoped ORM Session","title":"Session()"},{"location":"terraform/","text":"Terraform Utilities drizm_commons.utils.tf A wrapper around a .tfvars file. from drizm_commons.utils.tf import Tfvars Tfvars Wrapper for a parsed *.tfvars file.","title":"Terraform Utilities"},{"location":"terraform/#terraform-utilities","text":"","title":"Terraform Utilities"},{"location":"terraform/#drizm_commons.utils.tf","text":"A wrapper around a .tfvars file. from drizm_commons.utils.tf import Tfvars","title":"tf"},{"location":"terraform/#drizm_commons.utils.tf.Tfvars","text":"Wrapper for a parsed *.tfvars file.","title":"Tfvars"},{"location":"testing/","text":"Testing Utilities drizm_commons.testing.biased Contains utilities that are specifically biased towards certain Drizm organization standards. from drizm_commons.testing.biased import * self_to_id ( body , force_str = False ) Extracts the ID from a Drizm-HATEOAS compliant response body. Example body: { \"self\" : { \"href\" : \"http://example.net/resources/1/\" } } For the above body, the returned value would be 1. Parameters: Name Type Description Default body Dict[str, Union[str, dict]] The JSONified response body. required force_str Optional[bool] If True , will always output a string, the default behaviour is to try and guess the correct type, which can be either a String (e.g. UUID), or an Integer (Numeric IDs). False Returns: Type Description Union[str, int] The extracted identifier. drizm_commons.testing.conversion Contains utilities for the conversion of data. from drizm_commons.testing.conversion import * image_file_to_b64 ( image_file ) Encodes an image file as Base64. To obtain the stringified Base64 version of the image, you can convert the output like so: image_file_to_b64 ( my_image_file ) . decode () Parameters: Name Type Description Default image_file BytesIO The BytesIO file object to be converted. required Returns: Type Description bytes Bytes representation of the Base64 encoded image. drizm_commons.testing.truthiness Contains utilities to check for the truthiness of assertions. from drizm_commons.testing.truthiness import * all_items_equal ( sequence ) Check whether all hashable items in a sequence are equal. Parameters: Name Type Description Default sequence Sequence[Hashable] A sequence of hashables to be checked. required Returns: Type Description bool True if all items in the sequence are equal, else False . all_items_present ( sequence , values ) Check whether all provided values are present at any index in the provided sequence . Parameters: Name Type Description Default sequence Sequence[Hashable] An iterable of Hashable values to check for values in. required values Sequence[Hashable] An iterable of Hashable values for whose presence to check sequence for. required Returns: Type Description bool True if all values are present somewhere in sequence , else False . all_keys_present ( dictionary , keys , strict = False ) Checks whether all provided keys are present in the dictionary. Parameters: Name Type Description Default dictionary Dict[Hashable, Any] The dictionary to be checked. required keys Sequence[Hashable] A sequence of hashable values to be searched for. Must not contain any duplicate values. required strict Optional[bool] If True , this will check that the provided keys 1:1 match the keys in the dictionary. False Returns: Type Description bool True if all provided keys were found in the dictionary, False otherwise. all_nested_zipped_equal ( sequence ) Check whether all items, at the same indexes, in a nested sequence are equal. For example: example_list = [[ 1 , 2 ], [ 1 , 2 ], [ 1 , 2 ]] all_nested_zipped_equal ( example_list ) Is the same as: example_list [ 0 ][ 0 ] == example_list [ 1 ][ 0 ] == example_list [ 2 ][ 0 ] Parameters: Name Type Description Default sequence Sequence[Sequence] A nested sequence to be checked. required Returns: Type Description bool True if the contents of the nested sequences are equal, else False . is_class_method ( klass , name ) Check if the attribute of the passed klass is a @classmethod . This is a strict check, meaning it actually checks for the @classmethod descriptor. Credit for this implementation goes to: https://stackoverflow.com/a/19228282`. Parameters: Name Type Description Default klass Class object or instance to check for the attribute on. required name str Name of the attribute to check for. required Returns: Type Description bool True if the method is a classmethod, else False . is_dunder ( name ) Check whether a given attribute name is a dunder, e.g. __name__ . Parameters: Name Type Description Default name str The provided attribute name. required Returns: Type Description bool True if name is a valid dunder, else False . is_instance_method ( klass , name ) Check if the attribute of the passed klass is an instance method. Parameters: Name Type Description Default klass Class object or instance to check for the attribute on. required name str Name of the attribute to check for. required Returns: Type Description bool True if the method is an instance method, else False . is_static_method ( klass , name ) Check if the attribute of the passed klass is a @staticmethod . Parameters: Name Type Description Default klass Class object or instance to check for the attribute on. required name str Name of the attribute to check for. required Returns: Type Description bool True if the method is a staticmethod, else False . uri_is_http ( uri ) Check whether a string is a valid HTTP URI. Parameters: Name Type Description Default uri str The string to check. required Returns: Type Description bool True if the string is a valid URI, False otherwise. uuid4_is_valid ( value ) Check whether a given string is a valid UUIDv4. Parameters: Name Type Description Default value str The string to be tested. required Returns: Type Description bool True if the string is a valid UUIDv4, else False .","title":"Testing Utilities"},{"location":"testing/#testing-utilities","text":"","title":"Testing Utilities"},{"location":"testing/#drizm_commons.testing.biased","text":"Contains utilities that are specifically biased towards certain Drizm organization standards. from drizm_commons.testing.biased import *","title":"biased"},{"location":"testing/#drizm_commons.testing.biased.self_to_id","text":"Extracts the ID from a Drizm-HATEOAS compliant response body. Example body: { \"self\" : { \"href\" : \"http://example.net/resources/1/\" } } For the above body, the returned value would be 1. Parameters: Name Type Description Default body Dict[str, Union[str, dict]] The JSONified response body. required force_str Optional[bool] If True , will always output a string, the default behaviour is to try and guess the correct type, which can be either a String (e.g. UUID), or an Integer (Numeric IDs). False Returns: Type Description Union[str, int] The extracted identifier.","title":"self_to_id()"},{"location":"testing/#drizm_commons.testing.conversion","text":"Contains utilities for the conversion of data. from drizm_commons.testing.conversion import *","title":"conversion"},{"location":"testing/#drizm_commons.testing.conversion.image_file_to_b64","text":"Encodes an image file as Base64. To obtain the stringified Base64 version of the image, you can convert the output like so: image_file_to_b64 ( my_image_file ) . decode () Parameters: Name Type Description Default image_file BytesIO The BytesIO file object to be converted. required Returns: Type Description bytes Bytes representation of the Base64 encoded image.","title":"image_file_to_b64()"},{"location":"testing/#drizm_commons.testing.truthiness","text":"Contains utilities to check for the truthiness of assertions. from drizm_commons.testing.truthiness import *","title":"truthiness"},{"location":"testing/#drizm_commons.testing.truthiness.all_items_equal","text":"Check whether all hashable items in a sequence are equal. Parameters: Name Type Description Default sequence Sequence[Hashable] A sequence of hashables to be checked. required Returns: Type Description bool True if all items in the sequence are equal, else False .","title":"all_items_equal()"},{"location":"testing/#drizm_commons.testing.truthiness.all_items_present","text":"Check whether all provided values are present at any index in the provided sequence . Parameters: Name Type Description Default sequence Sequence[Hashable] An iterable of Hashable values to check for values in. required values Sequence[Hashable] An iterable of Hashable values for whose presence to check sequence for. required Returns: Type Description bool True if all values are present somewhere in sequence , else False .","title":"all_items_present()"},{"location":"testing/#drizm_commons.testing.truthiness.all_keys_present","text":"Checks whether all provided keys are present in the dictionary. Parameters: Name Type Description Default dictionary Dict[Hashable, Any] The dictionary to be checked. required keys Sequence[Hashable] A sequence of hashable values to be searched for. Must not contain any duplicate values. required strict Optional[bool] If True , this will check that the provided keys 1:1 match the keys in the dictionary. False Returns: Type Description bool True if all provided keys were found in the dictionary, False otherwise.","title":"all_keys_present()"},{"location":"testing/#drizm_commons.testing.truthiness.all_nested_zipped_equal","text":"Check whether all items, at the same indexes, in a nested sequence are equal. For example: example_list = [[ 1 , 2 ], [ 1 , 2 ], [ 1 , 2 ]] all_nested_zipped_equal ( example_list ) Is the same as: example_list [ 0 ][ 0 ] == example_list [ 1 ][ 0 ] == example_list [ 2 ][ 0 ] Parameters: Name Type Description Default sequence Sequence[Sequence] A nested sequence to be checked. required Returns: Type Description bool True if the contents of the nested sequences are equal, else False .","title":"all_nested_zipped_equal()"},{"location":"testing/#drizm_commons.testing.truthiness.is_class_method","text":"Check if the attribute of the passed klass is a @classmethod . This is a strict check, meaning it actually checks for the @classmethod descriptor. Credit for this implementation goes to: https://stackoverflow.com/a/19228282`. Parameters: Name Type Description Default klass Class object or instance to check for the attribute on. required name str Name of the attribute to check for. required Returns: Type Description bool True if the method is a classmethod, else False .","title":"is_class_method()"},{"location":"testing/#drizm_commons.testing.truthiness.is_dunder","text":"Check whether a given attribute name is a dunder, e.g. __name__ . Parameters: Name Type Description Default name str The provided attribute name. required Returns: Type Description bool True if name is a valid dunder, else False .","title":"is_dunder()"},{"location":"testing/#drizm_commons.testing.truthiness.is_instance_method","text":"Check if the attribute of the passed klass is an instance method. Parameters: Name Type Description Default klass Class object or instance to check for the attribute on. required name str Name of the attribute to check for. required Returns: Type Description bool True if the method is an instance method, else False .","title":"is_instance_method()"},{"location":"testing/#drizm_commons.testing.truthiness.is_static_method","text":"Check if the attribute of the passed klass is a @staticmethod . Parameters: Name Type Description Default klass Class object or instance to check for the attribute on. required name str Name of the attribute to check for. required Returns: Type Description bool True if the method is a staticmethod, else False .","title":"is_static_method()"},{"location":"testing/#drizm_commons.testing.truthiness.uri_is_http","text":"Check whether a string is a valid HTTP URI. Parameters: Name Type Description Default uri str The string to check. required Returns: Type Description bool True if the string is a valid URI, False otherwise.","title":"uri_is_http()"},{"location":"testing/#drizm_commons.testing.truthiness.uuid4_is_valid","text":"Check whether a given string is a valid UUIDv4. Parameters: Name Type Description Default value str The string to be tested. required Returns: Type Description bool True if the string is a valid UUIDv4, else False .","title":"uuid4_is_valid()"},{"location":"types/","text":"Custom Types drizm_commons.utils.type Custom data-type implementations. from drizm_commons.utils.type import * AttrDict A dictionary whose keys can be accessed like attributes. Examples: obj = AttrDict ({ \"test\" : \"ok\" , \"something-else\" : 3 }) obj . test # \"ok\" obj . something_else # 3 getattr ( obj , \"something-else\" ) # AttributeError IterableKeyDictionary A dictionary that supports a list or tuple of scalar, hashable values as keys. Also has support for normal hashable keys. Examples: obj = IterableKeyDictionary ({ ( \"order\" , 66 ): \"yes my lord\" }) obj [ \"order\" ] # \"yes my lord\" obj [ 66 ] # \"yes my lord\" obj [( \"order\" , 66 )] # \"yes my lord\"","title":"Custom Types"},{"location":"types/#custom-types","text":"","title":"Custom Types"},{"location":"types/#drizm_commons.utils.type","text":"Custom data-type implementations. from drizm_commons.utils.type import *","title":"type"},{"location":"types/#drizm_commons.utils.type.AttrDict","text":"A dictionary whose keys can be accessed like attributes. Examples: obj = AttrDict ({ \"test\" : \"ok\" , \"something-else\" : 3 }) obj . test # \"ok\" obj . something_else # 3 getattr ( obj , \"something-else\" ) # AttributeError","title":"AttrDict"},{"location":"types/#drizm_commons.utils.type.IterableKeyDictionary","text":"A dictionary that supports a list or tuple of scalar, hashable values as keys. Also has support for normal hashable keys. Examples: obj = IterableKeyDictionary ({ ( \"order\" , 66 ): \"yes my lord\" }) obj [ \"order\" ] # \"yes my lord\" obj [ 66 ] # \"yes my lord\" obj [( \"order\" , 66 )] # \"yes my lord\"","title":"IterableKeyDictionary"},{"location":"utils/","text":"General Utilities drizm_commons.utils.decorators memoize ( fn ) A decorator that caches the last provided parameter for a function, until a new one is provided. Only works for function with a single positional param. Warning This method is most likely not thread-safe and is only recommended to be used for scripts that do not rely on threading or multiprocessing . Examples: @memoize def hello ( name : str ) -> None : print ( f 'Hello { name . capitalize () . strip () } !' ) hello ( \"Ben\" ) hello () # after the first run, we do not need to pass any params anymore resolve_super_auto_resolution ( fn ) A decorator that fixes the issues with the parameterless super call, on instance methods of classes created with type() , or types.new_class() . See: Issue 29944 Whether this is to be considered a bug or not is up to your use-case. This decorator however can override the functions closure cell to effectively 'patch' this issue in the local scope of each method. drizm_commons.utils.pathing Path A subclass of pathlib.Path. With the exception of the below listed, overridden methods, the behaviour is identical to that of its superclass. rmdir ( self , recursive = True ) Remove this directory. By default, this method will recursively delete all contents of this directory. Parameters: Name Type Description Default recursive Optional[bool] If False , will only delete the directory if it is empty. Otherwise it will recursively delete its contents. True get_absolute_root_path () Return the absolute path to the project root directory. get_root_path_dirname () Return the name of the project root directory. drizm_commons.utils.various Assortment of uncategorizable utility functions. from drizm_commons.testing.various import * camel_to_snake ( name ) Converts camelCase names, to snake_case. decorate_class_object_methods ( cls , decorator , methods = None ) Programatically decorate all provided attributes of the class, with the passed decorator function. Parameters: Name Type Description Default cls ~DecoratedClass The class object to have its methods decorated. required decorator Callable The decorator function to be applied to the classes methods. required methods Optional[Sequence[str]] A list of attribute names to be decorated. Alternatively all non-dunder, instance methods will be decorated. None Returns: Type Description ~DecoratedClass The class with its methods decorated. exclude_keys ( dictionary , keys ) Removes all key-value pairs, matching the provided keys from the dictionary and returns a new one. Does not crash when non-existant keys are provided. Parameters: Name Type Description Default dictionary Mapping A mapping-type from which keys should be removed. required keys Sequence[Hashable] A sequence of hashable keys to be excluded from the new dictionary. required Returns: Type Description dict A new dictionary minus the specified key-value pairs.","title":"General Utilities"},{"location":"utils/#general-utilities","text":"","title":"General Utilities"},{"location":"utils/#drizm_commons.utils.decorators","text":"","title":"decorators"},{"location":"utils/#drizm_commons.utils.decorators.memoize","text":"A decorator that caches the last provided parameter for a function, until a new one is provided. Only works for function with a single positional param. Warning This method is most likely not thread-safe and is only recommended to be used for scripts that do not rely on threading or multiprocessing . Examples: @memoize def hello ( name : str ) -> None : print ( f 'Hello { name . capitalize () . strip () } !' ) hello ( \"Ben\" ) hello () # after the first run, we do not need to pass any params anymore","title":"memoize()"},{"location":"utils/#drizm_commons.utils.decorators.resolve_super_auto_resolution","text":"A decorator that fixes the issues with the parameterless super call, on instance methods of classes created with type() , or types.new_class() . See: Issue 29944 Whether this is to be considered a bug or not is up to your use-case. This decorator however can override the functions closure cell to effectively 'patch' this issue in the local scope of each method.","title":"resolve_super_auto_resolution()"},{"location":"utils/#drizm_commons.utils.pathing","text":"","title":"pathing"},{"location":"utils/#drizm_commons.utils.pathing.Path","text":"A subclass of pathlib.Path. With the exception of the below listed, overridden methods, the behaviour is identical to that of its superclass.","title":"Path"},{"location":"utils/#drizm_commons.utils.pathing.Path.rmdir","text":"Remove this directory. By default, this method will recursively delete all contents of this directory. Parameters: Name Type Description Default recursive Optional[bool] If False , will only delete the directory if it is empty. Otherwise it will recursively delete its contents. True","title":"rmdir()"},{"location":"utils/#drizm_commons.utils.pathing.get_absolute_root_path","text":"Return the absolute path to the project root directory.","title":"get_absolute_root_path()"},{"location":"utils/#drizm_commons.utils.pathing.get_root_path_dirname","text":"Return the name of the project root directory.","title":"get_root_path_dirname()"},{"location":"utils/#drizm_commons.utils.various","text":"Assortment of uncategorizable utility functions. from drizm_commons.testing.various import *","title":"various"},{"location":"utils/#drizm_commons.utils.various.camel_to_snake","text":"Converts camelCase names, to snake_case.","title":"camel_to_snake()"},{"location":"utils/#drizm_commons.utils.various.decorate_class_object_methods","text":"Programatically decorate all provided attributes of the class, with the passed decorator function. Parameters: Name Type Description Default cls ~DecoratedClass The class object to have its methods decorated. required decorator Callable The decorator function to be applied to the classes methods. required methods Optional[Sequence[str]] A list of attribute names to be decorated. Alternatively all non-dunder, instance methods will be decorated. None Returns: Type Description ~DecoratedClass The class with its methods decorated.","title":"decorate_class_object_methods()"},{"location":"utils/#drizm_commons.utils.various.exclude_keys","text":"Removes all key-value pairs, matching the provided keys from the dictionary and returns a new one. Does not crash when non-existant keys are provided. Parameters: Name Type Description Default dictionary Mapping A mapping-type from which keys should be removed. required keys Sequence[Hashable] A sequence of hashable keys to be excluded from the new dictionary. required Returns: Type Description dict A new dictionary minus the specified key-value pairs.","title":"exclude_keys()"}]}